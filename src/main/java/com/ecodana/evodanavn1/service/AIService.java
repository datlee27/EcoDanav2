package com.ecodana.evodanavn1.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class AIService {

    @Value("${CLOUDFLARE_ACCOUNT_ID}")
    private String accountId;

    @Value("${CLOUDFLARE_API_TOKEN}")
    private String apiToken;

    @Value("${ai.cloudflare.model:@cf/meta/llama-3-8b-instruct}")
    private String model;

    private static final Logger logger = LoggerFactory.getLogger(AIService.class);
    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();

    // ===== PROMPT G·ªêC C·ªê ƒê·ªäNH =====
    private static final String SYSTEM_PROMPT = """
            ## Ng·ªØ c·∫£nh
            H√¥m nay l√† ng√†y: {current_date}.
            B·∫°n l√† **tr·ª£ l√Ω ·∫£o EcoDana**, chuy√™n v·ªÅ **d·ªãch v·ª• thu√™ xe ƒëi·ªán** (√¥ t√¥ ƒëi·ªán, xe m√°y ƒëi·ªán).
            Lu√¥n tr·∫£ l·ªùi b·∫±ng **Ti·∫øng Vi·ªát**, **ng·∫Øn g·ªçn**, **th√¢n thi·ªán**.

            ## üéØ Nhi·ªám v·ª•
            D·ª±a v√†o y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng, b·∫°n ph·∫£i ch·ªçn M·ªòT trong ba h√†nh ƒë·ªông sau:

            ## ‚öôÔ∏è Quy t·∫Øc ƒë·∫∑c bi·ªát

            **1Ô∏è‚É£. KHI NG∆Ø·ªúI D√ôNG T√åM XE (QUAN TR·ªåNG NH·∫§T):**
            - N·∫øu ng∆∞·ªùi d√πng mu·ªën t√¨m xe v·ªõi c√°c ti√™u ch√≠ (s·ªë ch·ªó, lo·∫°i xe, ng√†y, gi√°...), **CH·ªà** tr·∫£ v·ªÅ m·ªôt chu·ªói JSON duy nh·∫•t.
            - **ƒê·ªãnh d·∫°ng JSON:** `{"intent": "search", "filters": {...}}`
            - **QUAN TR·ªåNG:** Ch·ªâ tr√≠ch xu·∫•t c√°c ti√™u ch√≠ c√≥ trong l·ªùi n√≥i c·ªßa ng∆∞·ªùi d√πng. KH√îNG ƒë∆∞·ª£c t·ª± √Ω th√™m, suy di·ªÖn ho·∫∑c gi·∫£ ƒë·ªãnh b·∫•t k·ª≥ ti√™u ch√≠ n√†o kh√¥ng ƒë∆∞·ª£c cung c·∫•p.
            - **C√°c `filters` h·ª£p l·ªá (d√πng camelCase):**
              - `type`: 'ElectricCar' (√¥ t√¥ ƒëi·ªán), 'ElectricMotorcycle' (xe m√°y ƒëi·ªán).
              - `seats`: s·ªë ch·ªó ng·ªìi (s·ªë nguy√™n).
              - `budget`: gi√° t·ªëi ƒëa (s·ªë nguy√™n, v√≠ d·ª•: 500000).
              - `pickupDate`, `returnDate`: 'YYYY-MM-DD'.
            - **V√≠ d·ª• t√¨m xe:**
              - "t√¨m xe 4 ch·ªó" ‚Üí `{"intent":"search","filters":{"seats":4,"type":"ElectricCar"}}`
              - "xe m√°y ƒëi·ªán gi√° d∆∞·ªõi 200k" ‚Üí `{"intent":"search","filters":{"type":"ElectricMotorcycle","budget":200000}}`
              - "thu√™ xe 7 ch·ªó t·ª´ ng√†y mai" ‚Üí `{"intent":"search","filters":{"seats":7,"pickupDate":"{tomorrow_date}"}}`
              - "c·∫ßn xe 2 ch·ªó cu·ªëi tu·∫ßn n√†y" ‚Üí `{"intent":"search","filters":{"seats":2,"pickupDate":"{saturday_date}","returnDate":"{sunday_date}"}}`

            **2Ô∏è‚É£. KHI NG∆Ø·ªúI D√ôNG MU·ªêN ƒêI·ªÄU H∆Ø·ªöNG HO·∫∂C C·∫¶N T∆Ø V·∫§N:**
            - N·∫øu ng∆∞·ªùi d√πng mu·ªën ƒë·∫øn c√°c trang chung chung (trang ch·ªß, li√™n h·ªá, b·∫£ng gi√°) ho·∫∑c h·ªèi nh·ªØng c√¢u c·∫ßn t∆∞ v·∫•n chuy√™n s√¢u, tr·∫£ v·ªÅ JSON v·ªõi `intent: "redirect"`.
            - **QUAN TR·ªåNG:** C√°c c√¢u h·ªèi v·ªÅ ch√≠nh s√°ch, th√¥ng tin c√¥ng ty, ho·∫∑c c√°c v·∫•n ƒë·ªÅ ph·ª©c t·∫°p n√™n ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang `/contact`.
            - **V√≠ d·ª• ƒëi·ªÅu h∆∞·ªõng:**
              - "quay v·ªÅ trang ch·ªß" ‚Üí `{"intent":"redirect","url":"/"}`
              - "t√¥i c·∫ßn li√™n h·ªá" ho·∫∑c "l√†m sao ƒë·ªÉ g·∫∑p nh√¢n vi√™n?" ‚Üí `{"intent":"redirect","url":"/contact"}`
              - "cho t√¥i xem t·∫•t c·∫£ xe" ho·∫∑c "b·∫£ng gi√°" ‚Üí `{"intent":"redirect","url":"/vehicles"}`
              - "xe c·ªßa h√£ng n√†o?" ho·∫∑c "ch√≠nh s√°ch b·∫£o h√†nh ra sao?" ‚Üí `{"intent":"redirect","url":"/contact"}`

            **3Ô∏è‚É£. KHI NG∆Ø·ªúI D√ôNG H·ªéI C√ÇU ƒê∆†N GI·∫¢N:**
            - Ch·ªâ tr·∫£ l·ªùi b·∫±ng vƒÉn b·∫£n cho nh·ªØng c√¢u h·ªèi r·∫•t ƒë∆°n gi·∫£n v√† ph·ªï bi·∫øn.
            - **V√≠ d·ª• tr·∫£ l·ªùi:**
              - "th·ªß t·ª•c thu√™ xe th·∫ø n√†o?" ‚Üí "Th·ªß t·ª•c thu√™ xe r·∫•t ƒë∆°n gi·∫£n, ch·ªâ c·∫ßn CCCD ho·∫∑c b·∫±ng l√°i xe h·ª£p l·ªá l√† ƒë∆∞·ª£c b·∫°n nh√©."
              - "EcoDana ·ªü ƒë√¢u?" ‚Üí "Hi·ªán t·∫°i ch√∫ng t√¥i ch·ªß y·∫øu ho·∫°t ƒë·ªông t·∫°i ƒê√† N·∫µng b·∫°n nh√©."
            """;

    // H√†m t·∫°o HTML link khi intent l√† search
    private String buildSearchResponse(Map<String, Object> filters) {
        List<String> query = new ArrayList<>();
        List<String> desc = new ArrayList<>();

        if (filters.containsKey("seats")) {
            query.add("seats=" + filters.get("seats"));
            desc.add(filters.get("seats") + " ch·ªó");
        }
        if (filters.containsKey("type")) {
            String type = (String) filters.get("type");
            query.add("type=" + type);
            desc.add(type.equals("ElectricCar") ? "√¥ t√¥ ƒëi·ªán" : "xe m√°y ƒëi·ªán");
        }
        if (filters.containsKey("budget")) {
            query.add("budget=" + filters.get("budget"));
            desc.add("gi√° d∆∞·ªõi " + String.format("%,d", filters.get("budget")) + "ƒë");
        }
        if (filters.containsKey("pickupDate")) {
            query.add("pickupDate=" + filters.get("pickupDate"));
            desc.add("nh·∫≠n t·ª´ ng√†y " + filters.get("pickupDate"));
        }
        if (filters.containsKey("returnDate")) {
            query.add("returnDate=" + filters.get("returnDate"));
            desc.add("tr·∫£ tr∆∞·ªõc ng√†y " + filters.get("returnDate"));
        }

        if (desc.isEmpty()) {
            return "ƒê√£ t√¨m th·∫•y c√°c xe ph√π h·ª£p. B·∫°n c√≥ th·ªÉ <a href='/vehicles' style='color:#007bff;text-decoration:underline;font-weight:bold;'>xem t·∫°i ƒë√¢y</a>.";
        }

        String url = "/vehicles?" + String.join("&", query);
        String description = "ƒê√£ t√¨m th·∫•y xe " + String.join(" v√† ", desc) + ". B·∫°n c√≥ th·ªÉ ";
        String linkHtml = "<a href='" + url + "' style='color:#007bff;text-decoration:underline;font-weight:bold;'>xem t·∫°i ƒë√¢y</a>.";
        return "<p>" + description + linkHtml + "</p>";
    }

    public String askAI(String message) {
        if (accountId == null || apiToken == null || accountId.isBlank() || apiToken.isBlank()) {
            logger.error("‚ùå Cloudflare Account ID ho·∫∑c API Token ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh.");
            return "‚ö†Ô∏è D·ªãch v·ª• AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.";
        }

        String url = "https://api.cloudflare.com/client/v4/accounts/" + accountId + "/ai/run/" + model;

        LocalDate today = LocalDate.now();
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String currentDate = today.format(fmt);

        String systemPrompt = SYSTEM_PROMPT.replace("{current_date}", currentDate);

        try {
            // ==== Chu·∫©n b·ªã body ====
            Map<String, Object> body = new HashMap<>();
            List<Map<String, String>> messages = new ArrayList<>();
            messages.add(Map.of("role", "system", "content", systemPrompt));
            messages.add(Map.of("role", "user", "content", message));
            body.put("messages", messages);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBearerAuth(apiToken);

            HttpEntity<String> entity = new HttpEntity<>(objectMapper.writeValueAsString(body), headers);

            // ==== G·ªçi API Cloudflare AI ====
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                logger.error("‚ùå Cloudflare AI l·ªói: {} - {}", response.getStatusCode(), response.getBody());
                return "‚ö†Ô∏è L·ªói khi g·ªçi Cloudflare AI (" + response.getStatusCode() + ").";
            }

            // ==== X·ª≠ l√Ω ph·∫£n h·ªìi ====
            Map<String, Object> json = objectMapper.readValue(response.getBody(), Map.class);
            Map<String, Object> result = (Map<String, Object>) json.get("result");
            String raw = (String) result.get("response");

            // Thay placeholder ng√†y
            raw = raw.replace("{tomorrow_date}", today.plusDays(1).format(fmt))
                    .replace("{saturday_date}", today.with(java.time.DayOfWeek.SATURDAY).format(fmt))
                    .replace("{sunday_date}", today.with(java.time.DayOfWeek.SUNDAY).format(fmt))
                    .replace("{year}", String.valueOf(today.getYear()));

            // ==== C·∫£i ti·∫øn: T√¨m v√† x·ª≠ l√Ω JSON redirect m·ªôt c√°ch linh ho·∫°t ====
            // AI c√≥ th·ªÉ tr·∫£ v·ªÅ JSON trong m·ªôt kh·ªëi m√£ ```json ... ```
            Pattern jsonPattern = Pattern.compile("\\{.*\"intent\".*\\}", Pattern.DOTALL);
            Matcher matcher = jsonPattern.matcher(raw);

            if (matcher.find()) {
                String jsonString = matcher.group();
                try {
                    Map<String, Object> obj = objectMapper.readValue(jsonString, Map.class);
                    String intent = (String) obj.get("intent");

                    if ("search".equals(intent) && obj.containsKey("filters")) {
                        @SuppressWarnings("unchecked")
                        Map<String, Object> filters = (Map<String, Object>) obj.get("filters");
                        return buildSearchResponse(filters);
                    }

                    if ("redirect".equals(intent) && obj.containsKey("url")) {
                        String redirectUrl = (String) obj.get("url");
                        String responseMessage;
                        if (redirectUrl.contains("/contact")) {
                            responseMessage = "ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n, b·∫°n vui l√≤ng ";
                        } else if (redirectUrl.equals("/")) {
                            responseMessage = "ƒêang chuy·ªÉn b·∫°n v·ªÅ trang ch·ªß. B·∫°n c√≥ th·ªÉ ";
                        } else {
                            responseMessage = "Ch·∫Øc ch·∫Øn r·ªìi! B·∫°n c√≥ th·ªÉ ";
                        }
                        String linkHtml = "<a href='" + redirectUrl + "' style='color:#007bff;text-decoration:underline;font-weight:bold;'>xem t·∫°i ƒë√¢y</a>.";
                        return "<p>" + responseMessage + linkHtml + "</p>";
                    }

                } catch (Exception e) {
                    logger.warn("‚ö†Ô∏è Kh√¥ng parse ƒë∆∞·ª£c JSON redirect t·ª´ AI: {}", jsonString, e);
                    // N·∫øu parse l·ªói, s·∫Ω ƒëi ƒë·∫øn logic fallback b√™n d∆∞·ªõi
                }
            }

            // Fallback: N·∫øu AI tr·∫£ v·ªÅ vƒÉn b·∫£n th∆∞·ªùng (theo quy t·∫Øc 3) ho·∫∑c kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá
            // *** S·ª¨A L·ªñI LOGIC FALLBACK ***
            // Ch·ªâ tr·∫£ v·ªÅ th√¥ng b√°o l·ªói n·∫øu c√¢u tr·∫£ l·ªùi c·ªßa AI tr·ªëng ho·∫∑c qu√° ng·∫Øn, thay v√¨ ki·ªÉm tra th·∫ª HTML.
            if (raw == null || raw.isBlank() || raw.length() < 10) {
                logger.warn("AI kh√¥ng tr·∫£ v·ªÅ JSON ho·∫∑c HTML, c√¢u h·ªèi c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω: '{}'", message);
                return "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n vui l√≤ng <a href='/contact' style='color:#007bff;text-decoration:underline;font-weight:bold;'>li√™n h·ªá tr·ª±c ti·∫øp</a> v·ªõi ch√∫ng t√¥i nh√©.";
            }

            return raw;

        } catch (HttpClientErrorException e) {
            logger.error("‚ùå L·ªói Cloudflare AI: {} - {}", e.getStatusCode(), e.getResponseBodyAsString(), e);
            return "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI. Vui l√≤ng th·ª≠ l·∫°i sau.";
        } catch (Exception e) {
            logger.error("‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi Cloudflare AI", e);
            return "‚ö†Ô∏è C√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }
    }
}
